cmake_minimum_required(VERSION 3.16)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

project(gpxpy VERSION 0.1.0 LANGUAGES CXX CUDA)

# Option for GPU support with CUDA/cuBLAS
option(GPXPY_WITH_CUDA "Enable GPU support with CUDA/cuBLAS" OFF)
# Pass variable to C++ code
add_compile_definitions(GPXPY_WITH_CUDA=$<BOOL:${GPXPY_WITH_CUDA}>)

find_package(HPX REQUIRED)
find_package(MKL CONFIG REQUIRED)

# Include dir
include_directories(${HPX_INCLUDE_DIRS})
include_directories(${MKL_INCLUDE_DIRS})

# Source files
set(SOURCE_FILES
    src/adapter_cublas.cpp
    src/adapter_mkl.cpp
    src/gp_algorithms_cpu.cpp
    src/gp_functions.cpp
    src/gp_kernel.cpp
    src/gp_optimizer.cpp
    src/gp_uncertainty.cpp
    src/gpxpy_c.cpp
    src/target.cpp
    src/tiled_algorithms_cpu.cpp
    src/utils_c.cpp
)

if(GPXPY_WITH_CUDA)
    list(APPEND SOURCE_FILES
        src/cuda_kernels.cu
        src/gp_algorithms_gpu.cpp
        src/tiled_algorithms_gpu.cpp
    )
endif()

# Headers (to be installed)
set(HEADER_FILES
    include/adapter_cublas.hpp
    include/adapter_mkl.hpp
    include/cuda_utils.hpp
    include/gp_algorithms_cpu.hpp
    include/gp_algorithms_gpu.hpp
    include/gp_functions.hpp
    include/gp_kernels.hpp
    include/gp_optimizer.hpp
    include/gp_uncertainty.hpp
    include/gpxpy_c.hpp
    include/target.hpp
    include/tiled_algorithms_cpu.hpp
    include/tiled_algorithms_gpu.hpp
    include/utils_c.hpp
)

# Add library
add_library(gpxpy SHARED ${SOURCE_FILES})

# Link HPX libraries
target_link_libraries(gpxpy PRIVATE ${HPX_LIBRARIES} MKL::MKL)
target_link_libraries(gpxpy PRIVATE
    ${HPX_LIBRARIES}
    MKL::MKL
    atomic)

if(GPXPY_WITH_CUDA)
    target_link_libraries(gpxpy PRIVATE CUDA::cublas CUDA::cusolver)
endif()

# Include directories
target_include_directories(
  gpxpy PRIVATE include/ ${HPX_INCLUDE_DIRS}
                $<TARGET_PROPERTY:MKL::MKL,INTERFACE_INCLUDE_DIRECTORIES>)

# Set the RPATH to include the MKL library paths
set_target_properties(gpxpy PROPERTIES INSTALL_RPATH "${MKL_LIBRARIES}")

# Set default installation prefix if not specified by user
if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
  get_filename_component(PARENT_DIR "${CMAKE_CURRENT_LIST_DIR}" DIRECTORY)
  set(CMAKE_INSTALL_PREFIX
      "${PARENT_DIR}/examples/gpxpy_cpp/install_cpp"
      CACHE PATH "Installation Directory" FORCE)
endif()

# Install
install(TARGETS gpxpy DESTINATION lib)

# Create base directory
install(DIRECTORY include/ DESTINATION include)
